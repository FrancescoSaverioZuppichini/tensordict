
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/data_fashion.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_data_fashion.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_data_fashion.py:


Using TensorDict for datasets
=============================

.. GENERATED FROM PYTHON SOURCE LINES 9-14

In this tutorial we demonstrate how ``TensorDict`` can be used to
efficiently and transparently load and manage data inside a training
pipeline. The tutorial is based heavily on the `PyTorch Quickstart
Tutorial <https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html>`__,
but modified to demonstrate use of ``TensorDict``.

.. GENERATED FROM PYTHON SOURCE LINES 14-28

.. code-block:: default



    import torch
    import torch.nn as nn

    from tensordict import MemmapTensor, TensorDict
    from torch.utils.data import DataLoader
    from torchvision import datasets
    from torchvision.transforms import ToTensor

    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f"Using device: {device}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using device: cpu




.. GENERATED FROM PYTHON SOURCE LINES 29-33

The ``torchvision.datasets`` module contains a number of convenient pre-prepared
datasets. In this tutorial we'll use the relatively simple FashionMNIST dataset. Each
image is an item of clothing, the objective is to classify the type of clothing in
the image (e.g. "Bag", "Sneaker" etc.).

.. GENERATED FROM PYTHON SOURCE LINES 33-47

.. code-block:: default


    training_data = datasets.FashionMNIST(
        root="data",
        train=True,
        download=True,
        transform=ToTensor(),
    )
    test_data = datasets.FashionMNIST(
        root="data",
        train=False,
        download=True,
        transform=ToTensor(),
    )








.. GENERATED FROM PYTHON SOURCE LINES 48-54

We will create two tensordicts, one each for the training and test data. We create
memory-mapped tensors to hold the data. This will allow us to efficiently load
batches of transformed data from disk rather than repeatedly load and transform
individual images.

First we create the ``MemmapTensor`` containers.

.. GENERATED FROM PYTHON SOURCE LINES 54-79

.. code-block:: default



    training_data_td = TensorDict(
        {
            "images": MemmapTensor(
                len(training_data),
                *training_data[0][0].squeeze().shape,
                dtype=torch.float32,
            ),
            "targets": MemmapTensor(len(training_data), dtype=torch.int64),
        },
        batch_size=[len(training_data)],
        device=device,
    )
    test_data_td = TensorDict(
        {
            "images": MemmapTensor(
                len(test_data), *test_data[0][0].squeeze().shape, dtype=torch.float32
            ),
            "targets": MemmapTensor(len(test_data), dtype=torch.int64),
        },
        batch_size=[len(test_data)],
        device=device,
    )








.. GENERATED FROM PYTHON SOURCE LINES 80-83

Then we can iterate over the data to populate the memory-mapped tensors. This takes a
bit of time, but performing the transforms up-front will save repeated effort during
training later.

.. GENERATED FROM PYTHON SOURCE LINES 83-90

.. code-block:: default


    for i, (img, label) in enumerate(training_data):
        training_data_td[i] = TensorDict({"images": img, "targets": label}, [])

    for i, (img, label) in enumerate(test_data):
        test_data_td[i] = TensorDict({"images": img, "targets": label}, [])








.. GENERATED FROM PYTHON SOURCE LINES 91-101

DataLoaders
----------------

We'll create DataLoaders from the ``torchvision``-provided Datasets, as well as from
our memory-mapped TensorDicts.

Since ``TensorDict`` implements ``__len__`` and ``__getitem__`` (and also
``__getitems__``) we can use it like a map-style Dataset and create a ``DataLoader``
directly from it. Note that because ``TensorDict`` can already handle batched indices,
there is no need for collation, so we pass the identity function as ``collate_fn``.

.. GENERATED FROM PYTHON SOURCE LINES 101-114

.. code-block:: default


    batch_size = 64

    train_dataloader = DataLoader(training_data, batch_size=batch_size)
    test_dataloader = DataLoader(test_data, batch_size=batch_size)

    train_dataloader_td = DataLoader(
        training_data_td, batch_size=batch_size, collate_fn=lambda x: x
    )
    test_dataloader_td = DataLoader(
        test_data_td, batch_size=batch_size, collate_fn=lambda x: x
    )








.. GENERATED FROM PYTHON SOURCE LINES 115-121

Model
-------

We use the same model from the
`Quickstart Tutorial <https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html>`__.


.. GENERATED FROM PYTHON SOURCE LINES 121-145

.. code-block:: default



    class Net(nn.Module):
        def __init__(self):
            super().__init__()
            self.flatten = nn.Flatten()
            self.linear_relu_stack = nn.Sequential(
                nn.Linear(28 * 28, 512),
                nn.ReLU(),
                nn.Linear(512, 512),
                nn.ReLU(),
                nn.Linear(512, 10),
            )

        def forward(self, x):
            x = self.flatten(x)
            logits = self.linear_relu_stack(x)
            return logits


    model = Net().to(device)
    model_td = Net().to(device)
    model, model_td





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (Net(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (linear_relu_stack): Sequential(
        (0): Linear(in_features=784, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=10, bias=True)
      )
    ), Net(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (linear_relu_stack): Sequential(
        (0): Linear(in_features=784, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=10, bias=True)
      )
    ))



.. GENERATED FROM PYTHON SOURCE LINES 146-152

Optimizing the parameters
---------------------------------

We'll optimise the parameters of the model using stochastic gradient descent and
cross-entropy loss.


.. GENERATED FROM PYTHON SOURCE LINES 152-177

.. code-block:: default


    loss_fn = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)
    optimizer_td = torch.optim.SGD(model_td.parameters(), lr=1e-3)


    def train(dataloader, model, loss_fn, optimizer):
        size = len(dataloader.dataset)
        model.train()

        for batch, (X, y) in enumerate(dataloader):
            X, y = X.to(device), y.to(device)

            pred = model(X)
            loss = loss_fn(pred, y)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            if batch % 100 == 0:
                loss, current = loss.item(), batch * len(X)
                print(f"loss: {loss:>7f} [{current:>5d}/{size:>5d}]")









.. GENERATED FROM PYTHON SOURCE LINES 178-181

The training loop for our ``TensorDict``-based DataLoader is very similar, we just
adjust how we unpack the data to the more explicit key-based retrieval offered by
``TensorDict``. The ``.contiguous()`` method loads the data stored in the memmap tensor.

.. GENERATED FROM PYTHON SOURCE LINES 181-267

.. code-block:: default



    def train_td(dataloader, model, loss_fn, optimizer):
        size = len(dataloader.dataset)
        model.train()

        for batch, data in enumerate(dataloader):
            X, y = data["images"].contiguous(), data["targets"].contiguous()

            pred = model(X)
            loss = loss_fn(pred, y)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            if batch % 100 == 0:
                loss, current = loss.item(), batch * len(X)
                print(f"loss: {loss:>7f} [{current:>5d}/{size:>5d}]")


    def test(dataloader, model, loss_fn):
        size = len(dataloader.dataset)
        num_batches = len(dataloader)
        model.eval()
        test_loss, correct = 0, 0
        with torch.no_grad():
            for X, y in dataloader:
                X, y = X.to(device), y.to(device)

                pred = model(X)

                test_loss += loss_fn(pred, y).item()
                correct += (pred.argmax(1) == y).type(torch.float).sum().item()

        test_loss /= num_batches
        correct /= size

        print(
            f"Test Error: \n Accuracy: {(100 * correct):>0.1f}%, Avg loss: {test_loss:>8f} \n"
        )


    def test_td(dataloader, model, loss_fn):
        size = len(dataloader.dataset)
        num_batches = len(dataloader)
        model.eval()
        test_loss, correct = 0, 0
        with torch.no_grad():
            for batch in dataloader:
                X, y = batch["images"].contiguous(), batch["targets"].contiguous()

                pred = model(X)

                test_loss += loss_fn(pred, y).item()
                correct += (pred.argmax(1) == y).type(torch.float).sum().item()

        test_loss /= num_batches
        correct /= size

        print(
            f"Test Error: \n Accuracy: {(100 * correct):>0.1f}%, Avg loss: {test_loss:>8f} \n"
        )


    for d in train_dataloader_td:
        print(d)
        break

    import time

    t0 = time.time()
    epochs = 5
    for t in range(epochs):
        print(f"Epoch {t + 1}\n-------------------------")
        train_td(train_dataloader_td, model_td, loss_fn, optimizer_td)
        test_td(test_dataloader_td, model_td, loss_fn)
    print(f"TensorDict training done! time: {time.time() - t0: 4.4f} s")

    t0 = time.time()
    epochs = 5
    for t in range(epochs):
        print(f"Epoch {t + 1}\n-------------------------")
        train(train_dataloader, model, loss_fn, optimizer)
        test(test_dataloader, model, loss_fn)
    print(f"Training done! time: {time.time() - t0: 4.4f} s")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    TensorDict(
        fields={
            images: MemmapTensor(shape=torch.Size([64, 28, 28]), device=cpu, dtype=torch.float32, is_shared=False),
            targets: MemmapTensor(shape=torch.Size([64]), device=cpu, dtype=torch.int64, is_shared=False)},
        batch_size=torch.Size([64]),
        device=cpu,
        is_shared=False)
    Epoch 1
    -------------------------
    loss: 2.308486 [    0/60000]
    loss: 2.297754 [ 6400/60000]
    loss: 2.279289 [12800/60000]
    loss: 2.267704 [19200/60000]
    loss: 2.261634 [25600/60000]
    loss: 2.222089 [32000/60000]
    loss: 2.238396 [38400/60000]
    loss: 2.198850 [44800/60000]
    loss: 2.199248 [51200/60000]
    loss: 2.163132 [57600/60000]
    Test Error: 
     Accuracy: 48.6%, Avg loss: 2.161191 

    Epoch 2
    -------------------------
    loss: 2.177960 [    0/60000]
    loss: 2.165946 [ 6400/60000]
    loss: 2.110691 [12800/60000]
    loss: 2.118062 [19200/60000]
    loss: 2.078522 [25600/60000]
    loss: 2.010653 [32000/60000]
    loss: 2.043718 [38400/60000]
    loss: 1.960121 [44800/60000]
    loss: 1.977041 [51200/60000]
    loss: 1.886284 [57600/60000]
    Test Error: 
     Accuracy: 59.5%, Avg loss: 1.895556 

    Epoch 3
    -------------------------
    loss: 1.938253 [    0/60000]
    loss: 1.905396 [ 6400/60000]
    loss: 1.793068 [12800/60000]
    loss: 1.820528 [19200/60000]
    loss: 1.723729 [25600/60000]
    loss: 1.666897 [32000/60000]
    loss: 1.692050 [38400/60000]
    loss: 1.588797 [44800/60000]
    loss: 1.626069 [51200/60000]
    loss: 1.499369 [57600/60000]
    Test Error: 
     Accuracy: 60.0%, Avg loss: 1.529518 

    Epoch 4
    -------------------------
    loss: 1.607098 [    0/60000]
    loss: 1.568690 [ 6400/60000]
    loss: 1.422712 [12800/60000]
    loss: 1.481178 [19200/60000]
    loss: 1.372266 [25600/60000]
    loss: 1.365837 [32000/60000]
    loss: 1.381691 [38400/60000]
    loss: 1.297208 [44800/60000]
    loss: 1.340862 [51200/60000]
    loss: 1.230441 [57600/60000]
    Test Error: 
     Accuracy: 62.2%, Avg loss: 1.261412 

    Epoch 5
    -------------------------
    loss: 1.344936 [    0/60000]
    loss: 1.325812 [ 6400/60000]
    loss: 1.161023 [12800/60000]
    loss: 1.260918 [19200/60000]
    loss: 1.141479 [25600/60000]
    loss: 1.167712 [32000/60000]
    loss: 1.192304 [38400/60000]
    loss: 1.114280 [44800/60000]
    loss: 1.161764 [51200/60000]
    loss: 1.071627 [57600/60000]
    Test Error: 
     Accuracy: 64.0%, Avg loss: 1.095631 

    TensorDict training done! time:  12.4248 s
    Epoch 1
    -------------------------
    loss: 2.305797 [    0/60000]
    loss: 2.292019 [ 6400/60000]
    loss: 2.269571 [12800/60000]
    loss: 2.260283 [19200/60000]
    loss: 2.246671 [25600/60000]
    loss: 2.210417 [32000/60000]
    loss: 2.221908 [38400/60000]
    loss: 2.184736 [44800/60000]
    loss: 2.179454 [51200/60000]
    loss: 2.145866 [57600/60000]
    Test Error: 
     Accuracy: 43.0%, Avg loss: 2.139609 

    Epoch 2
    -------------------------
    loss: 2.157623 [    0/60000]
    loss: 2.140382 [ 6400/60000]
    loss: 2.072911 [12800/60000]
    loss: 2.085929 [19200/60000]
    loss: 2.038267 [25600/60000]
    loss: 1.972459 [32000/60000]
    loss: 2.002909 [38400/60000]
    loss: 1.917036 [44800/60000]
    loss: 1.928200 [51200/60000]
    loss: 1.844879 [57600/60000]
    Test Error: 
     Accuracy: 56.0%, Avg loss: 1.847298 

    Epoch 3
    -------------------------
    loss: 1.890277 [    0/60000]
    loss: 1.851770 [ 6400/60000]
    loss: 1.724596 [12800/60000]
    loss: 1.767912 [19200/60000]
    loss: 1.660551 [25600/60000]
    loss: 1.619986 [32000/60000]
    loss: 1.641859 [38400/60000]
    loss: 1.545386 [44800/60000]
    loss: 1.580874 [51200/60000]
    loss: 1.469141 [57600/60000]
    Test Error: 
     Accuracy: 61.0%, Avg loss: 1.492591 

    Epoch 4
    -------------------------
    loss: 1.564177 [    0/60000]
    loss: 1.529415 [ 6400/60000]
    loss: 1.377419 [12800/60000]
    loss: 1.449154 [19200/60000]
    loss: 1.332536 [25600/60000]
    loss: 1.335957 [32000/60000]
    loss: 1.346744 [38400/60000]
    loss: 1.275849 [44800/60000]
    loss: 1.319103 [51200/60000]
    loss: 1.216309 [57600/60000]
    Test Error: 
     Accuracy: 63.1%, Avg loss: 1.243519 

    Epoch 5
    -------------------------
    loss: 1.321029 [    0/60000]
    loss: 1.304489 [ 6400/60000]
    loss: 1.137854 [12800/60000]
    loss: 1.243107 [19200/60000]
    loss: 1.115470 [25600/60000]
    loss: 1.145875 [32000/60000]
    loss: 1.164685 [38400/60000]
    loss: 1.103218 [44800/60000]
    loss: 1.152970 [51200/60000]
    loss: 1.064836 [57600/60000]
    Test Error: 
     Accuracy: 64.6%, Avg loss: 1.085171 

    Training done! time:  34.7779 s





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  58.813 seconds)


.. _sphx_glr_download_tutorials_data_fashion.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: data_fashion.py <data_fashion.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: data_fashion.ipynb <data_fashion.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
